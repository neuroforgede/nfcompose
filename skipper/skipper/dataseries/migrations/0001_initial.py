# This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. 
# If a copy of the MPL was not distributed with this file, 
# You can obtain one at https://mozilla.org/MPL/2.0/.
# This file is part of NF Compose
# [2019] - [2024] Â© NeuroForge GmbH & Co. KG


# Generated by Django 2.2.8 on 2020-01-09 13:13

import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.manager
import django_multitenant.mixins  # type: ignore
import skipper.core.models.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0006_auto_20200106_2307'),
    ]

    operations = [
        migrations.CreateModel(
            name='DataPoint',
            fields=[
                ('id', models.CharField(default=None, max_length=512, primary_key=True, serialize=False)),
                ('data_series_id', models.UUIDField()),
                ('external_id', models.CharField(default=None, max_length=256)),
                ('deleted', models.BooleanField(default=False)),
                ('point_in_time', models.DateTimeField()),
            ],
            options={
                'db_table': '_3_view_data_point',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DataPoint_Dimension',
            fields=[
                ('data_point_id', models.CharField(default=None, max_length=512, primary_key=True, serialize=False)),
                ('point_in_time', models.DateTimeField()),
                ('dimension_id', models.UUIDField()),
                ('value', models.CharField(default=None, max_length=512)),
            ],
            options={
                'db_table': '_3_view_data_point_dimension',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DataPoint_FloatFact',
            fields=[
                ('data_point_id', models.CharField(default=None, max_length=512, primary_key=True, serialize=False)),
                ('point_in_time', models.DateTimeField()),
                ('fact_id', models.UUIDField()),
                ('value', models.FloatField(null=True)),
            ],
            options={
                'db_table': '_3_view_data_point_float_fact',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DataPoint_ImageFact',
            fields=[
                ('data_point_id', models.CharField(default=None, max_length=512, primary_key=True, serialize=False)),
                ('point_in_time', models.DateTimeField()),
                ('fact_id', models.UUIDField()),
                ('value', models.ImageField(blank=True, null=True, upload_to='')),
            ],
            options={
                'db_table': '_3_view_data_point_image_fact',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DataPoint_JsonFact',
            fields=[
                ('data_point_id', models.CharField(default=None, max_length=512, primary_key=True, serialize=False)),
                ('point_in_time', models.DateTimeField()),
                ('fact_id', models.UUIDField()),
                ('value', django.contrib.postgres.fields.jsonb.JSONField(default=dict, null=True)),
            ],
            options={
                'db_table': '_3_view_data_point_json_fact',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DataPoint_StringFact',
            fields=[
                ('data_point_id', models.CharField(default=None, max_length=512, primary_key=True, serialize=False)),
                ('point_in_time', models.DateTimeField()),
                ('fact_id', models.UUIDField()),
                ('value', models.CharField(default=None, max_length=256, null=True)),
            ],
            options={
                'db_table': '_3_view_data_point_string_fact',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DataPoint_TextFact',
            fields=[
                ('data_point_id', models.CharField(default=None, max_length=512, primary_key=True, serialize=False)),
                ('point_in_time', models.DateTimeField()),
                ('fact_id', models.UUIDField()),
                ('value', models.TextField(null=True)),
            ],
            options={
                'db_table': '_3_view_data_point_text_fact',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DataPoint_TimestampFact',
            fields=[
                ('data_point_id', models.CharField(default=None, max_length=512, primary_key=True, serialize=False)),
                ('point_in_time', models.DateTimeField()),
                ('fact_id', models.UUIDField()),
                ('value', models.DateTimeField(null=True)),
            ],
            options={
                'db_table': '_3_view_data_point_timestamp_fact',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DisplayDataPoint',
            fields=[
                ('id', models.CharField(default=None, max_length=512, primary_key=True, serialize=False)),
                ('payload', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('external_id', models.CharField(default=None, max_length=256)),
                ('point_in_time', models.DateTimeField()),
                ('versions', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
            ],
            options={
                'db_table': 'DOES_NOT_EXIST',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WritableDataPoint',
            fields=[
                ('id', models.CharField(default=None, max_length=512, primary_key=True, serialize=False)),
                ('data_series_id', models.UUIDField()),
                ('external_id', models.CharField(default=None, max_length=256)),
                ('deleted', models.BooleanField(default=False)),
                ('point_in_time', models.DateTimeField()),
            ],
            options={
                'db_table': '_3_data_point',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WritableDataPoint_Dimension',
            fields=[
                ('data_point_id', models.CharField(default=None, max_length=512, primary_key=True, serialize=False)),
                ('point_in_time', models.DateTimeField()),
                ('dimension_id', models.UUIDField()),
                ('value', models.CharField(default=None, max_length=512)),
            ],
            options={
                'db_table': '_3_data_point_dimension',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WritableDataPoint_FloatFact',
            fields=[
                ('data_point_id', models.CharField(default=None, max_length=512, primary_key=True, serialize=False)),
                ('point_in_time', models.DateTimeField()),
                ('fact_id', models.UUIDField()),
                ('value', models.FloatField(null=True)),
            ],
            options={
                'db_table': '_3_data_point_float_fact',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WritableDataPoint_ImageFact',
            fields=[
                ('data_point_id', models.CharField(default=None, max_length=512, primary_key=True, serialize=False)),
                ('point_in_time', models.DateTimeField()),
                ('fact_id', models.UUIDField()),
                ('value', models.ImageField(blank=True, null=True, upload_to='')),
            ],
            options={
                'db_table': '_3_data_point_image_fact',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WritableDataPoint_JsonFact',
            fields=[
                ('data_point_id', models.CharField(default=None, max_length=512, primary_key=True, serialize=False)),
                ('point_in_time', models.DateTimeField()),
                ('fact_id', models.UUIDField()),
                ('value', django.contrib.postgres.fields.jsonb.JSONField(default=dict, null=True)),
            ],
            options={
                'db_table': '_3_data_point_json_fact',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WritableDataPoint_StringFact',
            fields=[
                ('data_point_id', models.CharField(default=None, max_length=512, primary_key=True, serialize=False)),
                ('point_in_time', models.DateTimeField()),
                ('fact_id', models.UUIDField()),
                ('value', models.CharField(default=None, max_length=256, null=True)),
            ],
            options={
                'db_table': '_3_data_point_string_fact',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WritableDataPoint_TextFact',
            fields=[
                ('data_point_id', models.CharField(default=None, max_length=512, primary_key=True, serialize=False)),
                ('point_in_time', models.DateTimeField()),
                ('fact_id', models.UUIDField()),
                ('value', models.TextField(null=True)),
            ],
            options={
                'db_table': '_3_data_point_text_fact',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WritableDataPoint_TimestampFact',
            fields=[
                ('data_point_id', models.CharField(default=None, max_length=512, primary_key=True, serialize=False)),
                ('point_in_time', models.DateTimeField()),
                ('fact_id', models.UUIDField()),
                ('value', models.DateTimeField(null=True)),
            ],
            options={
                'db_table': '_3_data_point_timestamp_fact',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DataSeries',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('point_in_time', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('external_id', models.CharField(default=None, max_length=256)),
                ('name', models.CharField(default=None, max_length=256)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='core.Tenant')),
            ],
            options={
                'db_table': '_3_data_series',
                'permissions': [('add_ds_data_points', 'Can add DataSeries Data Points'), ('change_ds_data_points', 'Can change DataSeries Data Points'), ('delete_ds_data_points', 'Can delete DataSeries Data Points'), ('view_ds_data_points', 'Can view DataSeries Data Points'), ('add_ds_structure_element', 'Can add DataSeries Structure Elements (Fact/Dim)'), ('change_ds_structure_element', 'Can change DataSeries Structure Elements (Fact/Dim)'), ('delete_ds_structure_element', 'Can delete DataSeries Structure Elements (Fact/Dim)'), ('view_ds_structure_element', 'Can delete DataSeries Structure Elements (Fact/Dim)')],
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='TimestampFact',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('point_in_time', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default=None, max_length=256)),
                ('optional', models.BooleanField()),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='core.Tenant')),
            ],
            options={
                'db_table': '_3_timestamp_fact',
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='TextFact',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('point_in_time', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default=None, max_length=256)),
                ('optional', models.BooleanField()),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='core.Tenant')),
            ],
            options={
                'db_table': '_3_text_fact',
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='StringFact',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('point_in_time', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default=None, max_length=256)),
                ('optional', models.BooleanField()),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='core.Tenant')),
            ],
            options={
                'db_table': '_3_string_fact',
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='JsonFact',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('point_in_time', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default=None, max_length=256)),
                ('optional', models.BooleanField()),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='core.Tenant')),
            ],
            options={
                'db_table': '_3_json_fact',
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ImageFact',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('point_in_time', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default=None, max_length=256)),
                ('optional', models.BooleanField()),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='core.Tenant')),
            ],
            options={
                'db_table': '_3_image_fact',
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='FloatFact',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('point_in_time', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default=None, max_length=256)),
                ('optional', models.BooleanField()),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='core.Tenant')),
            ],
            options={
                'db_table': '_3_float_fact',
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Dimension',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('point_in_time', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default=None, max_length=256)),
                ('reference', skipper.core.models.fields.FKey(on_delete=django.db.models.deletion.DO_NOTHING, to='dataseries.DataSeries')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='core.Tenant')),
            ],
            options={
                'db_table': '_3_dimension',
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='DataSeries_TimestampFact',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('point_in_time', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('external_id', models.CharField(default=None, max_length=256)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('data_series', skipper.core.models.fields.FKey(on_delete=django.db.models.deletion.DO_NOTHING, to='dataseries.DataSeries')),
                ('fact', skipper.core.models.fields.UniqueFKey(on_delete=django.db.models.deletion.DO_NOTHING, to='dataseries.TimestampFact')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='core.Tenant')),
            ],
            options={
                'db_table': '_3_data_series_timestamp_fact',
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='DataSeries_TextFact',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('point_in_time', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('external_id', models.CharField(default=None, max_length=256)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('data_series', skipper.core.models.fields.FKey(on_delete=django.db.models.deletion.DO_NOTHING, to='dataseries.DataSeries')),
                ('fact', skipper.core.models.fields.UniqueFKey(on_delete=django.db.models.deletion.DO_NOTHING, to='dataseries.TextFact')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='core.Tenant')),
            ],
            options={
                'db_table': '_3_data_series_text_fact',
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='DataSeries_StringFact',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('point_in_time', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('external_id', models.CharField(default=None, max_length=256)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('data_series', skipper.core.models.fields.FKey(on_delete=django.db.models.deletion.DO_NOTHING, to='dataseries.DataSeries')),
                ('fact', skipper.core.models.fields.UniqueFKey(on_delete=django.db.models.deletion.DO_NOTHING, to='dataseries.StringFact')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='core.Tenant')),
            ],
            options={
                'db_table': '_3_data_series_string_fact',
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='DataSeries_JsonFact',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('point_in_time', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('external_id', models.CharField(default=None, max_length=256)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('data_series', skipper.core.models.fields.FKey(on_delete=django.db.models.deletion.DO_NOTHING, to='dataseries.DataSeries')),
                ('fact', skipper.core.models.fields.UniqueFKey(on_delete=django.db.models.deletion.DO_NOTHING, to='dataseries.JsonFact')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='core.Tenant')),
            ],
            options={
                'db_table': '_3_data_series_json_fact',
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='DataSeries_ImageFact',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('point_in_time', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('external_id', models.CharField(default=None, max_length=256)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('data_series', skipper.core.models.fields.FKey(on_delete=django.db.models.deletion.DO_NOTHING, to='dataseries.DataSeries')),
                ('fact', skipper.core.models.fields.UniqueFKey(on_delete=django.db.models.deletion.DO_NOTHING, to='dataseries.ImageFact')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='core.Tenant')),
            ],
            options={
                'db_table': '_3_data_series_image_fact',
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='DataSeries_FloatFact',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('point_in_time', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('external_id', models.CharField(default=None, max_length=256)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('data_series', skipper.core.models.fields.FKey(on_delete=django.db.models.deletion.DO_NOTHING, to='dataseries.DataSeries')),
                ('fact', skipper.core.models.fields.UniqueFKey(on_delete=django.db.models.deletion.DO_NOTHING, to='dataseries.FloatFact')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='core.Tenant')),
            ],
            options={
                'db_table': '_3_data_series_float_fact',
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='DataSeries_Dimension',
            fields=[
                ('deleted_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('point_in_time', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('external_id', models.CharField(default=None, max_length=256)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('data_series', skipper.core.models.fields.FKey(on_delete=django.db.models.deletion.DO_NOTHING, to='dataseries.DataSeries')),
                ('dimension', skipper.core.models.fields.UniqueFKey(on_delete=django.db.models.deletion.DO_NOTHING, to='dataseries.Dimension')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='core.Tenant')),
            ],
            options={
                'db_table': '_3_data_series_dimension',
            },
            bases=(django_multitenant.mixins.TenantModelMixin, models.Model),
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddConstraint(
            model_name='timestampfact',
            constraint=models.UniqueConstraint(fields=('tenant_id', 'id'), name='_3_timestamp_fact_tenant_id_id_0'),
        ),
        migrations.AddConstraint(
            model_name='textfact',
            constraint=models.UniqueConstraint(fields=('tenant_id', 'id'), name='_3_text_fact_tenant_id_id_0'),
        ),
        migrations.AddConstraint(
            model_name='stringfact',
            constraint=models.UniqueConstraint(fields=('tenant_id', 'id'), name='_3_string_fact_tenant_id_id_0'),
        ),
        migrations.AddConstraint(
            model_name='jsonfact',
            constraint=models.UniqueConstraint(fields=('tenant_id', 'id'), name='_3_json_fact_tenant_id_id_0'),
        ),
        migrations.AddConstraint(
            model_name='imagefact',
            constraint=models.UniqueConstraint(fields=('tenant_id', 'id'), name='_3_image_fact_tenant_id_id_0'),
        ),
        migrations.AddConstraint(
            model_name='floatfact',
            constraint=models.UniqueConstraint(fields=('tenant_id', 'id'), name='_3_float_fact_tenant_id_id_0'),
        ),
        migrations.AddConstraint(
            model_name='dimension',
            constraint=models.UniqueConstraint(fields=('tenant_id', 'id'), name='_3_dimension_tenant_id_id_0'),
        ),
        migrations.AddConstraint(
            model_name='dataseries_timestampfact',
            constraint=models.UniqueConstraint(condition=models.Q(deleted_at__isnull=True), fields=('tenant_id', 'data_series', 'external_id'), name='_3_data_series_timestamp_fact_external_id_1'),
        ),
        migrations.AddConstraint(
            model_name='dataseries_timestampfact',
            constraint=models.UniqueConstraint(condition=models.Q(deleted_at__isnull=False), fields=('tenant_id', 'data_series', 'external_id', 'deleted_at'), name='_3_data_series_timestamp_fact_external_id_2'),
        ),
        migrations.AddConstraint(
            model_name='dataseries_timestampfact',
            constraint=models.UniqueConstraint(fields=('tenant_id', 'id'), name='_3_data_series_timestamp_fact_tenant_id_id_0'),
        ),
        migrations.AddConstraint(
            model_name='dataseries_textfact',
            constraint=models.UniqueConstraint(condition=models.Q(deleted_at__isnull=True), fields=('tenant_id', 'data_series', 'external_id'), name='_3_data_series_text_fact_external_id_1'),
        ),
        migrations.AddConstraint(
            model_name='dataseries_textfact',
            constraint=models.UniqueConstraint(condition=models.Q(deleted_at__isnull=False), fields=('tenant_id', 'data_series', 'external_id', 'deleted_at'), name='_3_data_series_text_fact_external_id_2'),
        ),
        migrations.AddConstraint(
            model_name='dataseries_textfact',
            constraint=models.UniqueConstraint(fields=('tenant_id', 'id'), name='_3_data_series_text_fact_tenant_id_id_0'),
        ),
        migrations.AddConstraint(
            model_name='dataseries_stringfact',
            constraint=models.UniqueConstraint(condition=models.Q(deleted_at__isnull=True), fields=('tenant_id', 'data_series', 'external_id'), name='_3_data_series_string_fact_external_id_1'),
        ),
        migrations.AddConstraint(
            model_name='dataseries_stringfact',
            constraint=models.UniqueConstraint(condition=models.Q(deleted_at__isnull=False), fields=('tenant_id', 'data_series', 'external_id', 'deleted_at'), name='_3_data_series_string_fact_external_id_2'),
        ),
        migrations.AddConstraint(
            model_name='dataseries_stringfact',
            constraint=models.UniqueConstraint(fields=('tenant_id', 'id'), name='_3_data_series_string_fact_tenant_id_id_0'),
        ),
        migrations.AddConstraint(
            model_name='dataseries_jsonfact',
            constraint=models.UniqueConstraint(condition=models.Q(deleted_at__isnull=True), fields=('tenant_id', 'data_series', 'external_id'), name='_3_data_series_json_fact_external_id_1'),
        ),
        migrations.AddConstraint(
            model_name='dataseries_jsonfact',
            constraint=models.UniqueConstraint(condition=models.Q(deleted_at__isnull=False), fields=('tenant_id', 'data_series', 'external_id', 'deleted_at'), name='_3_data_series_json_fact_external_id_2'),
        ),
        migrations.AddConstraint(
            model_name='dataseries_jsonfact',
            constraint=models.UniqueConstraint(fields=('tenant_id', 'id'), name='_3_data_series_json_fact_tenant_id_id_0'),
        ),
        migrations.AddConstraint(
            model_name='dataseries_imagefact',
            constraint=models.UniqueConstraint(condition=models.Q(deleted_at__isnull=True), fields=('tenant_id', 'data_series', 'external_id'), name='_3_data_series_image_fact_external_id_1'),
        ),
        migrations.AddConstraint(
            model_name='dataseries_imagefact',
            constraint=models.UniqueConstraint(condition=models.Q(deleted_at__isnull=False), fields=('tenant_id', 'data_series', 'external_id', 'deleted_at'), name='_3_data_series_image_fact_external_id_2'),
        ),
        migrations.AddConstraint(
            model_name='dataseries_imagefact',
            constraint=models.UniqueConstraint(fields=('tenant_id', 'id'), name='_3_data_series_image_fact_tenant_id_id_0'),
        ),
        migrations.AddConstraint(
            model_name='dataseries_floatfact',
            constraint=models.UniqueConstraint(condition=models.Q(deleted_at__isnull=True), fields=('tenant_id', 'data_series', 'external_id'), name='_3_data_series_float_fact_external_id_1'),
        ),
        migrations.AddConstraint(
            model_name='dataseries_floatfact',
            constraint=models.UniqueConstraint(condition=models.Q(deleted_at__isnull=False), fields=('tenant_id', 'data_series', 'external_id', 'deleted_at'), name='_3_data_series_float_fact_external_id_2'),
        ),
        migrations.AddConstraint(
            model_name='dataseries_floatfact',
            constraint=models.UniqueConstraint(fields=('tenant_id', 'id'), name='_3_data_series_float_fact_tenant_id_id_0'),
        ),
        migrations.AddConstraint(
            model_name='dataseries_dimension',
            constraint=models.UniqueConstraint(condition=models.Q(deleted_at__isnull=True), fields=('tenant_id', 'data_series', 'external_id'), name='_3_data_series_dimension_external_id_1'),
        ),
        migrations.AddConstraint(
            model_name='dataseries_dimension',
            constraint=models.UniqueConstraint(condition=models.Q(deleted_at__isnull=False), fields=('tenant_id', 'data_series', 'external_id', 'deleted_at'), name='_3_data_series_dimension_external_id_2'),
        ),
        migrations.AddConstraint(
            model_name='dataseries_dimension',
            constraint=models.UniqueConstraint(fields=('tenant_id', 'id'), name='_3_data_series_dimension_tenant_id_id_0'),
        ),
        migrations.AddConstraint(
            model_name='dataseries',
            constraint=models.UniqueConstraint(condition=models.Q(deleted_at__isnull=True), fields=('tenant_id', 'external_id'), name='_3_data_series_1'),
        ),
        migrations.AddConstraint(
            model_name='dataseries',
            constraint=models.UniqueConstraint(condition=models.Q(deleted_at__isnull=False), fields=('tenant_id', 'external_id', 'deleted_at'), name='_3_data_series_2'),
        ),
        migrations.AddConstraint(
            model_name='dataseries',
            constraint=models.UniqueConstraint(fields=('tenant_id', 'id'), name='_3_data_series_tenant_id_id_0'),
        ),
    ]
