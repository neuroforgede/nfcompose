# Generated by Django 2.2.12 on 2020-06-05 08:17

from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('dataseries', '0016_auto_20200604_1341'),
    ]

    operations = [
        migrations.CreateModel(
            name='PartitionsByUUID',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('base_table', models.CharField(default=None, max_length=63)),
                ('child_table', models.CharField(max_length=63, unique=True)),
                ('partition_key', models.UUIDField()),
            ],
            options={
                'db_table': '_3_partitions_by_uuid',
            },
        ),
        migrations.AddConstraint(
            model_name='partitionsbyuuid',
            constraint=models.UniqueConstraint(fields=('base_table', 'partition_key'), name='_3_partitions_by_uuid_base_table_partition_key'),
        ),
        migrations.RunSQL("""
            INSERT INTO _3_partitions_by_uuid("id", "base_table", "child_table", "partition_key")
            SELECT a.id, a.base_table, a.child_table, a.partition_key
            FROM
            (
                SELECT
                    uuid_in(
                        overlay(
                            overlay(
                                md5(
                                    random()::text || ':' || clock_timestamp()::text
                                ) placing '4' from 13
                            ) placing to_hex(floor(random()*(11-8+1) + 8)::int)::text from 17
                        )::cstring
                    ) as id,
                    parent.relname AS base_table,
                    child.relname AS child_table,
                    regexp_replace(child.relname, '_3_[a-z]+_[a-z]+_([a-z]+_)?([a-zA-Z0-9\\-]*)(_.*)?', '\\2')::uuid as partition_key
                FROM pg_inherits
                JOIN pg_partitioned_table ON pg_partitioned_table.partrelid = pg_inherits.inhparent
                JOIN pg_class parent ON parent.oid = pg_inherits.inhparent
                JOIN pg_class child ON child.oid = pg_inherits.inhrelid
                WHERE parent.relname = '_3_data_point'
                OR parent.relname = '_3_data_point_dimension'
                OR parent.relname SIMILAR TO '_3_data_point_[a-z]+_fact'
            ) a
        """)
    ]
