"""
This file contains all env vars that we need from inside the code.
Since we dont have all deployments moved to env variable deployments
we have these here so that deployments that mount the settings.py
don't crashloop because of missing env vars.
"""
import os


SKIPPER_OTEL_TELEMETRY_ENABLED = os.environ.get('SKIPPER_OTEL_TELEMETRY_ENABLED', 'false') == 'true'
SKIPPER_OTEL_SERVICE_NAME = os.environ.get('SKIPPER_OTEL_SERVICE_NAME', None)
SKIPPER_OTEL_JAEGER_AGENT_HOST_NAME = os.environ.get('SKIPPER_OTEL_JAEGER_AGENT_HOST_NAME', 'jaeger.local')
SKIPPER_OTEL_JAEGER_AGENT_PORT = int(os.environ.get('SKIPPER_OTEL_JAEGER_AGENT_PORT', 6831))
SKIPPER_OTEL_JAEGER_COLLECTOR_ENDPOINT = os.environ.get('SKIPPER_OTEL_JAEGER_COLLECTOR_ENDPOINT', None)
SKIPPER_OTEL_JAEGER_USERNAME = os.environ.get('SKIPPER_OTEL_JAEGER_USERNAME', None)
SKIPPER_OTEL_JAEGER_PASSWORD = os.environ.get('SKIPPER_OTEL_JAEGER_PASSWORD', None)
SKIPPER_OTEL_JAEGER_MAX_TAG_VALUE_LENGTH = os.environ.get('SKIPPER_OTEL_JAEGER_MAX_TAG_VALUE_LENGTH', None)

SKIPPER_OTEL_JAEGER_UI_ENABLED = os.environ.get('SKIPPER_OTEL_JAEGER_UI_ENABLED', 'false') == 'true'
SKIPPER_OTEL_JAEGER_UI_UPSTREAM = os.environ.get('SKIPPER_OTEL_JAEGER_UI_UPSTREAM', f'http://jaeger.local:16686')

SKIPPER_INSTALLATION_NAME = os.environ.get('SKIPPER_INSTALLATION_NAME', 'default')

SKIPPER_TASK_DASHBOARD_ENABLED = os.environ.get('SKIPPER_TASK_DASHBOARD_ENABLED', 'false') == 'true'
SKIPPER_TASK_DASHBOARD_UPSTREAM = os.environ.get('SKIPPER_TASK_DASHBOARD_UPSTREAM', "http://skipper.task.dashboard.local:5555")

# dataseries consumers

SKIPPER_CELERY_EVENT_QUEUE_MAX_EVENTS_PER_CONSUMER_HEARTBEAT = int(os.environ.get('SKIPPER_CELERY_EVENT_QUEUE_MAX_EVENTS_PER_CONSUMER_HEARTBEAT', 200))

SKIPPER_CELERY_EVENT_QUEUE_HEARTBEAT_SCHEDULE = int(os.environ.get('SKIPPER_CELERY_EVENT_QUEUE_HEARTBEAT_SCHEDULE', 10))
SKIPPER_CELERY_EVENT_QUEUE_CLEANUP_SCHEDULE = os.environ.get('SKIPPER_CELERY_EVENT_QUEUE_CLEANUP_SCHEDULE', '0 1 * * *')
SKIPPER_CELERY_FILE_REGISTRY_CLEANUP_SCHEDULE = os.environ.get('SKIPPER_CELERY_FILE_REGISTRY_CLEANUP_SCHEDULE', '0 1 * * *')
SKIPPER_CELERY_FILE_REGISTRY_CLEANUP_MAX_AGE_HOURS = int(os.environ.get('SKIPPER_CELERY_FILE_REGISTRY_CLEANUP_MAX_AGE_HOURS', 24))
if SKIPPER_CELERY_FILE_REGISTRY_CLEANUP_MAX_AGE_HOURS <= 0:
    raise ValueError('SKIPPER_CELERY_FILE_REGISTRY_CLEANUP_MAX_AGE_HOURS must be a positive integer')
SKIPPER_CELERY_DATA_SERIES_HISTORY_CLEANUP_SCHEDULE = os.environ.get('SKIPPER_CELERY_DATA_SERIES_HISTORY_CLEANUP_SCHEDULE', '0 1 * * *')
SKIPPER_CELERY_DATA_SERIES_META_MODEL_CLEANUP_SCHEDULE = os.environ.get('SKIPPER_CELERY_DATA_SERIES_META_MODEL_CLEANUP_SCHEDULE', '0 1 * * *')

# these two will have to match or otherwise, we might get bad performance due to persist tasks being
# ignored and not requeued fast enough
SKIPPER_CELERY_PERSIST_DATA_POINT_CHUNK_REQUEUE_SCHEDULE =  int(os.environ.get('SKIPPER_CELERY_PERSIST_DATA_POINT_CHUNK_REQUEUE_SCHEDULE', 60 * 30))
# after what time we requeue a chunk
SKIPPER_CELERY_PERSIST_DATA_POINT_CHUNK_REQUEUE_AGE_MINUTES =  int(os.environ.get('SKIPPER_CELERY_PERSIST_DATA_POINT_CHUNK_REQUEUE_AGE_MINUTES', 60))
# expire after 60 minutes
SKIPPER_CELERY_PERSIST_DATA_POINT_CHUNK_TASK_EXPIRE_MINUTES =  int(os.environ.get('SKIPPER_CELERY_PERSIST_DATA_POINT_CHUNK_TASK_EXPIRE_MINUTES', 60))
# cooldown after requeueing a chunk
# so we dont overload the system with requeues
SKIPPER_CELERY_PERSIST_DATA_POINT_CHUNK_REQUEUE_COOLDOWN_MINUTES = int(os.environ.get('SKIPPER_CELERY_PERSIST_DATA_POINT_CHUNK_REQUEUE_COOLDOWN_MINUTES', 40))
# by default we keep something resembling the old behaviour
# where we had effectively unbounded concurrency
SKIPPER_CELERY_DATA_SERIES_BULK_ASYNC_CONCURRENCY_PER_DATA_SERIES = int(os.environ.get('SKIPPER_CELERY_DATA_SERIES_BULK_ASYNC_CONCURRENCY_PER_DATA_SERIES', '100'))
SKIPPER_CELERY_DATA_SERIES_BULK_ASYNC_CONCURRENCY_LOCK_TIMEOUT = int(os.environ.get('SKIPPER_CELERY_DATA_SERIES_BULK_ASYNC_CONCURRENCY_LOCK_TIMEOUT', '180'))
SKIPPER_CELERY_DATA_SERIES_BULK_ASYNC_CONCURRENCY_MAX_RETRY_DELAY= int(os.environ.get('SKIPPER_CELERY_DATA_SERIES_BULK_ASYNC_CONCURRENCY_MAX_RETRY_DELAY', '60'))

SKIPPER_CELERY_HEALTH_CHECK_HEARTBEAT_SCHEDULE = int(os.environ.get('SKIPPER_CELERY_HEALTH_CHECK_HEARTBEAT_SCHEDULE', 30))
SKIPPER_CELERY_OUTSTANDING_TOKENS_CLEANUP_SCHEDULE = int(os.environ.get('SKIPPER_CELERY_OUTSTANDING_TOKENS_CLEANUP_SCHEDULE', 60 * 60))

SKIPPER_CONSUMER_PROXY_URL = os.environ.get('SKIPPER_CONSUMER_PROXY_URL', None)